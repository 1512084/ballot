'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _ballot = require('../ethereum/ballot');

var _ballot2 = _interopRequireDefault(_ballot);

var _web = require('../ethereum/web3');

var _web2 = _interopRequireDefault(_web);

var _routes = require('../routes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = 'C:\\D\\Ballot\\components\\RightVote.js';


var RightForm = function (_Component) {
    (0, _inherits3.default)(RightForm, _Component);

    function RightForm() {
        var _ref,
            _this2 = this;

        var _temp, _this, _ret;

        (0, _classCallCheck3.default)(this, RightForm);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = RightForm.__proto__ || (0, _getPrototypeOf2.default)(RightForm)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            value: '',
            errorMessage: '',
            loading: false
        }, _this.onSubmit = function () {
            var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(event) {
                var ballot, accounts;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                event.preventDefault();
                                ballot = (0, _ballot2.default)(_this.props.address);

                                _this.setState({ loading: true });
                                _context.prev = 3;
                                _context.next = 6;
                                return _web2.default.eth.getAccounts();

                            case 6:
                                accounts = _context.sent;
                                _context.next = 9;
                                return ballot.methods.giveRightToVote(_this.state.value).send({
                                    from: accounts[0]

                                });

                            case 9:
                                _routes.Router.replaceRoute('/ballots/' + _this.props.address);
                                _context.next = 15;
                                break;

                            case 12:
                                _context.prev = 12;
                                _context.t0 = _context['catch'](3);

                                _this.setState({ errorMessage: _context.t0.message });

                            case 15:
                                _this.setState({ loading: false, value: '' });

                            case 16:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, _this2, [[3, 12]]);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }(), _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
    }

    (0, _createClass3.default)(RightForm, [{
        key: 'render',
        value: function render() {
            var _this3 = this;

            return _react2.default.createElement(_semanticUiReact.Form, { onSubmit: this.onSubmit, error: !!this.state.errorMessage, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 31
                }
            }, _react2.default.createElement(_semanticUiReact.Form.Field, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 32
                }
            }, _react2.default.createElement('label', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 33
                }
            }, 'Address of Voter'), _react2.default.createElement(_semanticUiReact.Input, {
                value: this.state.value,
                onChange: function onChange(event) {
                    return _this3.setState({ value: event.target.value });
                },
                label: 'Address',
                labelPosition: 'right',
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 34
                }
            })), _react2.default.createElement(_semanticUiReact.Message, { error: true, header: 'Oops!', content: this.state.errorMessage, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 41
                }
            }), _react2.default.createElement(_semanticUiReact.Button, { primary: true, loading: this.state.loading, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 42
                }
            }, 'Accept!'));
        }
    }]);

    return RightForm;
}(_react.Component);

exports.default = RightForm;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiUmlnaHRGb3JtIiwiX0NvbXBvbmVudCIsIl9yZWYiLCJfdGhpczIiLCJfdGVtcCIsIl90aGlzIiwiX3JldCIsIl9sZW4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJhcmdzIiwiQXJyYXkiLCJfa2V5IiwiX19wcm90b19fIiwiY2FsbCIsImFwcGx5IiwiY29uY2F0Iiwic3RhdGUiLCJ2YWx1ZSIsImVycm9yTWVzc2FnZSIsImxvYWRpbmciLCJvblN1Ym1pdCIsIl9yZWYyIiwibWFyayIsIl9jYWxsZWUiLCJldmVudCIsImJhbGxvdCIsImFjY291bnRzIiwid3JhcCIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJwcmV2IiwibmV4dCIsInByZXZlbnREZWZhdWx0IiwicHJvcHMiLCJhZGRyZXNzIiwic2V0U3RhdGUiLCJldGgiLCJnZXRBY2NvdW50cyIsInNlbnQiLCJtZXRob2RzIiwiZ2l2ZVJpZ2h0VG9Wb3RlIiwic2VuZCIsImZyb20iLCJyZXBsYWNlUm91dGUiLCJ0MCIsIm1lc3NhZ2UiLCJzdG9wIiwiX3giLCJrZXkiLCJyZW5kZXIiLCJfdGhpczMiLCJjcmVhdGVFbGVtZW50IiwiZXJyb3IiLCJfX3NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsIkZpZWxkIiwib25DaGFuZ2UiLCJ0YXJnZXQiLCJsYWJlbCIsImxhYmVsUG9zaXRpb24iLCJoZWFkZXIiLCJjb250ZW50IiwicHJpbWFyeSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUxBLElBQUlBLGVBQWUseUNBQW5COzs7QUFPQSxJQUFJQyxZQUFZLFVBQVVDLFVBQVYsRUFBc0I7QUFDbEMsNEJBQVVELFNBQVYsRUFBcUJDLFVBQXJCOztBQUVBLGFBQVNELFNBQVQsR0FB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