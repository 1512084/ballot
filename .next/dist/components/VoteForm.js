'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _ballot = require('../ethereum/ballot');

var _ballot2 = _interopRequireDefault(_ballot);

var _web = require('../ethereum/web3');

var _web2 = _interopRequireDefault(_web);

var _routes = require('../routes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = 'C:\\D\\Ballot\\components\\VoteForm.js';


var VoteForm = function (_Component) {
    (0, _inherits3.default)(VoteForm, _Component);

    function VoteForm() {
        var _ref,
            _this2 = this;

        var _temp, _this, _ret;

        (0, _classCallCheck3.default)(this, VoteForm);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = VoteForm.__proto__ || (0, _getPrototypeOf2.default)(VoteForm)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            value: '',
            errorMessage: '',
            loading: false
        }, _this.onSubmit = function () {
            var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(event) {
                var ballot, accounts;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                event.preventDefault();
                                ballot = (0, _ballot2.default)(_this.props.address);

                                _this.setState({ loading: true });
                                _context.prev = 3;
                                _context.next = 6;
                                return _web2.default.eth.getAccounts();

                            case 6:
                                accounts = _context.sent;
                                _context.next = 9;
                                return ballot.methods.vote(parseInt(_this.state.value)).send({
                                    from: accounts[0]

                                });

                            case 9:
                                _routes.Router.replaceRoute('/ballots/' + _this.props.address);
                                _context.next = 15;
                                break;

                            case 12:
                                _context.prev = 12;
                                _context.t0 = _context['catch'](3);

                                _this.setState({ errorMessage: _context.t0.message });

                            case 15:
                                _this.setState({ loading: false, value: '' });

                            case 16:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, _this2, [[3, 12]]);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }(), _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
    }

    (0, _createClass3.default)(VoteForm, [{
        key: 'render',
        value: function render() {
            var _this3 = this;

            return _react2.default.createElement(_semanticUiReact.Form, { onSubmit: this.onSubmit, error: !!this.state.errorMessage, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 31
                }
            }, _react2.default.createElement(_semanticUiReact.Form.Field, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 32
                }
            }, _react2.default.createElement('label', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 33
                }
            }, 'Index of Proposal'), _react2.default.createElement(_semanticUiReact.Input, {
                value: this.state.value,
                onChange: function onChange(event) {
                    return _this3.setState({ value: event.target.value });
                },
                label: 'Index',
                labelPosition: 'right',
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 34
                }
            })), _react2.default.createElement(_semanticUiReact.Message, { error: true, header: 'Oops!', content: this.state.errorMessage, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 41
                }
            }), _react2.default.createElement(_semanticUiReact.Button, { primary: true, loading: this.state.loading, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 42
                }
            }, 'Vote!'));
        }
    }]);

    return VoteForm;
}(_react.Component);

exports.default = VoteForm;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiVm90ZUZvcm0iLCJfQ29tcG9uZW50IiwiX3JlZiIsIl90aGlzMiIsIl90ZW1wIiwiX3RoaXMiLCJfcmV0IiwiX2xlbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJfX3Byb3RvX18iLCJjYWxsIiwiYXBwbHkiLCJjb25jYXQiLCJzdGF0ZSIsInZhbHVlIiwiZXJyb3JNZXNzYWdlIiwibG9hZGluZyIsIm9uU3VibWl0IiwiX3JlZjIiLCJtYXJrIiwiX2NhbGxlZSIsImV2ZW50IiwiYmFsbG90IiwiYWNjb3VudHMiLCJ3cmFwIiwiX2NhbGxlZSQiLCJfY29udGV4dCIsInByZXYiLCJuZXh0IiwicHJldmVudERlZmF1bHQiLCJwcm9wcyIsImFkZHJlc3MiLCJzZXRTdGF0ZSIsImV0aCIsImdldEFjY291bnRzIiwic2VudCIsIm1ldGhvZHMiLCJ2b3RlIiwicGFyc2VJbnQiLCJzZW5kIiwiZnJvbSIsInJlcGxhY2VSb3V0ZSIsInQwIiwibWVzc2FnZSIsInN0b3AiLCJfeCIsImtleSIsInJlbmRlciIsIl90aGlzMyIsImNyZWF0ZUVsZW1lbnQiLCJlcnJvciIsIl9fc291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiRmllbGQiLCJvbkNoYW5nZSIsInRhcmdldCIsImxhYmVsIiwibGFiZWxQb3NpdGlvbiIsImhlYWRlciIsImNvbnRlbnQiLCJwcmltYXJ5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBTEEsSUFBSUEsZUFBZSx3Q0FBbkI7OztBQU9BLElBQUlDLFdBQVcsVUFBVUMsVUFBVixFQUFzQjtBQUNqQyw0QkFBVUQsUUFBVixFQUFvQkMsVUFBcEI7O0FBRUEsYUFBU0QsUUFBVCxHQUFv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