'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _web = require('../../ethereum/web3');

var _web2 = _interopRequireDefault(_web);

var _ballot = require('../../ethereum/ballot');

var _ballot2 = _interopRequireDefault(_ballot);

var _semanticUiReact = require('semantic-ui-react');

var _Layout = require('../../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _routes = require('../../routes');

var _VoteForm = require('../../components/VoteForm');

var _VoteForm2 = _interopRequireDefault(_VoteForm);

var _ProposalCard = require('../../components/ProposalCard');

var _ProposalCard2 = _interopRequireDefault(_ProposalCard);

var _RightVote = require('../../components/RightVote');

var _RightVote2 = _interopRequireDefault(_RightVote);

var _Delegate = require('../../components/Delegate');

var _Delegate2 = _interopRequireDefault(_Delegate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = 'C:\\D\\Ballot\\pages\\ballots\\show.js?entry';


var BallotShow = function (_Component) {
    (0, _inherits3.default)(BallotShow, _Component);

    function BallotShow() {
        (0, _classCallCheck3.default)(this, BallotShow);

        return (0, _possibleConstructorReturn3.default)(this, (BallotShow.__proto__ || (0, _getPrototypeOf2.default)(BallotShow)).apply(this, arguments));
    }

    (0, _createClass3.default)(BallotShow, [{
        key: 'renderProposalCards',
        value: function renderProposalCards() {
            return this.props.proposals.map(function (proposal, index) {
                return _react2.default.createElement(_ProposalCard2.default, {
                    key: index,
                    id: index,
                    proposal: proposal,
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 34
                    }
                });
            });
        }
    }, {
        key: 'renderCards',
        value: function renderCards() {
            var _props = this.props,
                proposalCount = _props.proposalCount,
                approvalCount = _props.approvalCount,
                voterCount = _props.voterCount,
                proposals = _props.proposals,
                manager = _props.manager,
                WinnerAtTime = _props.WinnerAtTime;

            var items = [{
                header: manager,
                meta: 'Địa chỉ Manager',
                description: 'Manager là người tạo ra cuộc bầu cử và có thể cấp quyền cho người đi bầu cử',
                style: { overflowWrap: 'break-word' }
            }, {
                header: proposalCount,
                meta: 'Số lượng ứng cử viên',
                description: 'Bạn sẽ bình chọn cho những ứng cử viên này',
                style: { overflowWrap: 'break-word' }
            }, {
                header: approvalCount,
                meta: 'Số lượng người đi bầu cử',
                description: 'Số lượng cử tri tham gia bầu cử',
                style: { overflowWrap: 'break-word' }
            }, {
                header: voterCount,
                meta: 'Số lượng người đã bầu',
                description: 'Số lượng cử tri đã sử dụng phiếu bầu của mình',
                style: { overflowWrap: 'break-word' }
            }, {
                header: _web2.default.utils.toAscii(WinnerAtTime),
                meta: 'Ứng cử viên chiến thắng',
                description: 'Ứng cử viên có số phiếu cao nhất đến thời điểm hiện tại (Bị sai nếu có nhiều hơn 1 ứng cử viên cao phiếu nhất)',
                style: { overflowWrap: 'break-word' }
            }];
            return _react2.default.createElement(_semanticUiReact.Card.Group, { items: items, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 88
                }
            });
        }
    }, {
        key: 'render',
        value: function render() {

            return _react2.default.createElement(_Layout2.default, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 93
                }
            }, _react2.default.createElement('h3', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 94
                }
            }, ' Ballot Show '), _react2.default.createElement(_semanticUiReact.Grid, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 95
                }
            }, _react2.default.createElement(_semanticUiReact.Grid.Row, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 96
                }
            }, _react2.default.createElement(_semanticUiReact.Grid.Column, { width: 10, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 97
                }
            }, this.renderCards(), _react2.default.createElement('h3', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 99
                }
            }, 'List of Proposals'), this.renderProposalCards()), _react2.default.createElement(_semanticUiReact.Grid.Column, { width: 6, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 103
                }
            }, _react2.default.createElement(_VoteForm2.default, { address: this.props.address, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 104
                }
            }), _react2.default.createElement('p', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 105
                }
            }), _react2.default.createElement(_RightVote2.default, { address: this.props.address, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 106
                }
            }), _react2.default.createElement('p', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 107
                }
            }), _react2.default.createElement(_Delegate2.default, { address: this.props.address, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 108
                }
            })))));
        }
    }], [{
        key: 'getInitialProps',
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(props) {
                var address, ballot, proposalCount, approvalCount, voterCount, WinnerAtTime, manager, proposals;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                address = props.query.address;
                                ballot = (0, _ballot2.default)(address);
                                _context.next = 4;
                                return ballot.methods.proposalCount().call();

                            case 4:
                                proposalCount = _context.sent;
                                _context.next = 7;
                                return ballot.methods.approvalCount().call();

                            case 7:
                                approvalCount = _context.sent;
                                _context.next = 10;
                                return ballot.methods.voterCount().call();

                            case 10:
                                voterCount = _context.sent;
                                _context.next = 13;
                                return ballot.methods.winnerName().call();

                            case 13:
                                WinnerAtTime = _context.sent;
                                _context.next = 16;
                                return ballot.methods.chairperson().call();

                            case 16:
                                manager = _context.sent;
                                _context.next = 19;
                                return _promise2.default.all(Array(parseInt(proposalCount)).fill().map(function (element, index) {
                                    return ballot.methods.proposals(index).call();
                                }));

                            case 19:
                                proposals = _context.sent;

                                console.log(proposals);

                                return _context.abrupt('return', { address: address, proposals: proposals, proposalCount: proposalCount, approvalCount: approvalCount, voterCount: voterCount, manager: manager, WinnerAtTime: WinnerAtTime });

                            case 22:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function getInitialProps(_x) {
                return _ref.apply(this, arguments);
            }

            return getInitialProps;
        }()
    }]);

    return BallotShow;
}(_react.Component);

exports.default = BallotShow;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiQmFsbG90U2hvdyIsIl9Db21wb25lbnQiLCJfX3Byb3RvX18iLCJhcHBseSIsImFyZ3VtZW50cyIsImtleSIsInZhbHVlIiwicmVuZGVyUHJvcG9zYWxDYXJkcyIsInByb3BzIiwicHJvcG9zYWxzIiwibWFwIiwicHJvcG9zYWwiLCJpbmRleCIsImNyZWF0ZUVsZW1lbnQiLCJpZCIsIl9fc291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwicmVuZGVyQ2FyZHMiLCJfcHJvcHMiLCJwcm9wb3NhbENvdW50IiwiYXBwcm92YWxDb3VudCIsInZvdGVyQ291bnQiLCJtYW5hZ2VyIiwiV2lubmVyQXRUaW1lIiwiaXRlbXMiLCJoZWFkZXIiLCJtZXRhIiwiZGVzY3JpcHRpb24iLCJzdHlsZSIsIm92ZXJmbG93V3JhcCIsInV0aWxzIiwidG9Bc2NpaSIsIkdyb3VwIiwicmVuZGVyIiwiUm93IiwiQ29sdW1uIiwid2lkdGgiLCJhZGRyZXNzIiwiX3JlZiIsIm1hcmsiLCJfY2FsbGVlIiwiYmFsbG90Iiwid3JhcCIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJwcmV2IiwibmV4dCIsInF1ZXJ5IiwibWV0aG9kcyIsImNhbGwiLCJzZW50Iiwid2lubmVyTmFtZSIsImNoYWlycGVyc29uIiwiYWxsIiwiQXJyYXkiLCJwYXJzZUludCIsImZpbGwiLCJlbGVtZW50IiwiY29uc29sZSIsImxvZyIsImFicnVwdCIsInN0b3AiLCJnZXRJbml0aWFsUHJvcHMiLCJfeCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQVZBLElBQUlBLGVBQWUsOENBQW5COzs7QUFZQSxJ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